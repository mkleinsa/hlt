// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lgp
double lgp(IntegerMatrix& x, NumericMatrix& z, NumericVector lambda, int nB, int nT, int n, int J, NumericVector tJ, int nDmax, NumericVector lJ, NumericVector theta, NumericVector d, double mud, double sigd, NumericVector a, NumericVector beta, double eps, double mud_prior_mean, double mud_prior_stdev, double sigd_prior_max, double lambdal_prior_min, double lambdal_prior_max);
RcppExport SEXP _hlt_lgp(SEXP xSEXP, SEXP zSEXP, SEXP lambdaSEXP, SEXP nBSEXP, SEXP nTSEXP, SEXP nSEXP, SEXP JSEXP, SEXP tJSEXP, SEXP nDmaxSEXP, SEXP lJSEXP, SEXP thetaSEXP, SEXP dSEXP, SEXP mudSEXP, SEXP sigdSEXP, SEXP aSEXP, SEXP betaSEXP, SEXP epsSEXP, SEXP mud_prior_meanSEXP, SEXP mud_prior_stdevSEXP, SEXP sigd_prior_maxSEXP, SEXP lambdal_prior_minSEXP, SEXP lambdal_prior_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nB(nBSEXP);
    Rcpp::traits::input_parameter< int >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tJ(tJSEXP);
    Rcpp::traits::input_parameter< int >::type nDmax(nDmaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lJ(lJSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type mud(mudSEXP);
    Rcpp::traits::input_parameter< double >::type sigd(sigdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type mud_prior_mean(mud_prior_meanSEXP);
    Rcpp::traits::input_parameter< double >::type mud_prior_stdev(mud_prior_stdevSEXP);
    Rcpp::traits::input_parameter< double >::type sigd_prior_max(sigd_prior_maxSEXP);
    Rcpp::traits::input_parameter< double >::type lambdal_prior_min(lambdal_prior_minSEXP);
    Rcpp::traits::input_parameter< double >::type lambdal_prior_max(lambdal_prior_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(lgp(x, z, lambda, nB, nT, n, J, tJ, nDmax, lJ, theta, d, mud, sigd, a, beta, eps, mud_prior_mean, mud_prior_stdev, sigd_prior_max, lambdal_prior_min, lambdal_prior_max));
    return rcpp_result_gen;
END_RCPP
}
// abs2
double abs2(double x);
RcppExport SEXP _hlt_abs2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(abs2(x));
    return rcpp_result_gen;
END_RCPP
}
// lt
double lt(IntegerMatrix& x, NumericMatrix& z, int iter, int burn, double delta, NumericMatrix& post, NumericVector ix, NumericVector ixe, int npar, int n, int nB, int J, int nDmax, NumericVector lJ, int nT, NumericVector tJ, NumericVector& accept, double eps, bool display_progress);
RcppExport SEXP _hlt_lt(SEXP xSEXP, SEXP zSEXP, SEXP iterSEXP, SEXP burnSEXP, SEXP deltaSEXP, SEXP postSEXP, SEXP ixSEXP, SEXP ixeSEXP, SEXP nparSEXP, SEXP nSEXP, SEXP nBSEXP, SEXP JSEXP, SEXP nDmaxSEXP, SEXP lJSEXP, SEXP nTSEXP, SEXP tJSEXP, SEXP acceptSEXP, SEXP epsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type post(postSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ixe(ixeSEXP);
    Rcpp::traits::input_parameter< int >::type npar(nparSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nB(nBSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type nDmax(nDmaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lJ(lJSEXP);
    Rcpp::traits::input_parameter< int >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tJ(tJSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type accept(acceptSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(lt(x, z, iter, burn, delta, post, ix, ixe, npar, n, nB, J, nDmax, lJ, nT, tJ, accept, eps, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hlt_lgp", (DL_FUNC) &_hlt_lgp, 22},
    {"_hlt_abs2", (DL_FUNC) &_hlt_abs2, 1},
    {"_hlt_lt", (DL_FUNC) &_hlt_lt, 19},
    {NULL, NULL, 0}
};

RcppExport void R_init_hlt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
